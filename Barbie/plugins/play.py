import config
from config import BANNED_USERS
from pyrogram import filters
from pyrogram.types import Message, InlineKeyboardMarkup
from pytgcalls.exceptions import NoActiveGroupCall
from ..core.call import CallMusic
from ..utils.stream.stream import stream as streams
from Barbie import app, YouTube, Spotify, Telegram
from ..utils import (
    PlayWrapper, is_video_allowed,
    formats, play_logs, botplaylist_markup, 
    time_to_seconds, livestream_markup, 
    track_markup, slider_markup, seconds_to_min)


__MODULE__ = "M·¥ús…™·¥Ñ"
__HELP__ = """
/play ·¥è Ä /vplay : s·¥õ·¥Ä Ä·¥õs s·¥õ Ä·¥á·¥Ä·¥ç…™…¥…¢ ·¥õ ú·¥á  Ä·¥á«´·¥ú·¥ás·¥õ·¥á·¥Ö ·¥õ Ä·¥Ä·¥Ñ·¥ã ·¥è…¥ ·¥†…™·¥Ö·¥á·¥è·¥Ñ ú·¥Ä·¥õ.
/playforce ·¥è Ä /vplayforce : **“ì·¥è Ä·¥Ñ·¥á ·¥© ü·¥Ä è** s·¥õ·¥è·¥©s ·¥õ ú·¥á ·¥è…¥…¢·¥è…™…¥…¢ s·¥õ Ä·¥á·¥Ä·¥ç ·¥Ä…¥·¥Ö s·¥õ·¥Ä Ä·¥õs s·¥õ Ä·¥á·¥Ä·¥ç…™…¥…¢ ·¥õ ú·¥á  Ä·¥á«´·¥ú·¥ás·¥õ·¥á·¥Ö ·¥õ Ä·¥Ä·¥Ñ·¥ã./pause : ·¥©·¥Ä·¥ús·¥á ·¥õ ú·¥á ·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ ·¥© ü·¥Ä è…™…¥…¢ s·¥õ Ä·¥á·¥Ä·¥ç.
/resume :  Ä·¥ás·¥ú·¥ç·¥á ·¥õ ú·¥á ·¥©·¥Ä·¥ús·¥á·¥Ö s·¥õ Ä·¥á·¥Ä·¥ç.
/restart :  Ä·¥ás·¥õ·¥Ä Ä·¥õ  ô·¥è·¥õ “ì·¥è Ä  è·¥è·¥ú Ä ·¥Ñ ú·¥Ä·¥õ
/skip : s·¥ã…™·¥© ·¥õ ú·¥á ·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ ·¥© ü·¥Ä è…™…¥…¢ s·¥õ Ä·¥á·¥Ä·¥ç ·¥Ä…¥·¥Ö s·¥õ·¥Ä Ä·¥õ s·¥õ Ä·¥á·¥Ä·¥ç…™…¥…¢ ·¥õ ú·¥á …¥·¥áx·¥õ ·¥õ Ä·¥Ä·¥Ñ·¥ã …™…¥ «´·¥ú·¥á·¥ú·¥á.
/end ·¥è Ä /stop : ·¥Ñ ü·¥á·¥Ä Äs ·¥õ ú·¥á «´·¥ú·¥á·¥ú·¥á ·¥Ä…¥·¥Ö ·¥á…¥·¥Ö ·¥õ ú·¥á ·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ ·¥© ü·¥Ä è…™…¥…¢ s·¥õ Ä·¥á·¥Ä·¥ç.
/player ·¥è Ä /queue : …¢·¥á·¥õ ·¥Ä…¥ …™…¥·¥õ·¥á Ä·¥Ä·¥Ñ·¥õ…™·¥†·¥á ·¥© ü·¥Ä è·¥á Ä ·¥©·¥Ä…¥·¥á ü ·¥è Ä s ú·¥è·¥°s ·¥õ ú·¥á «´·¥ú·¥á·¥ú·¥á·¥Ö ·¥õ Ä·¥Ä·¥Ñ·¥ãs  ü…™s·¥õ
/loop [·¥á…¥·¥Ä ô ü·¥á/·¥Ö…™s·¥Ä ô ü·¥á] ·¥è Ä [ ô·¥á·¥õ·¥°·¥á·¥á…¥ 1:10] : ·¥° ú·¥á…¥ ·¥Ä·¥Ñ·¥õ…™·¥†·¥Ä·¥õ·¥á·¥Ö  ô·¥è·¥õ ·¥°…™ ü ü ·¥© ü·¥Ä è ·¥õ ú·¥á ·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ ·¥© ü·¥Ä è…™…¥…¢ s·¥õ Ä·¥á·¥Ä·¥ç …™…¥  ü·¥è·¥è·¥© “ì·¥è Ä 10 ·¥õ…™·¥ç·¥ás ·¥è Ä ·¥õ ú·¥á …¥·¥ú·¥ç ô·¥á Ä ·¥è“ì  Ä·¥á«´·¥ú·¥ás·¥õ·¥á·¥Ö  ü·¥è·¥è·¥©s.
/shuffle : s ú·¥ú“ì“ì ü·¥á ·¥õ ú·¥á «´·¥ú·¥á·¥ú·¥á·¥Ö ·¥õ Ä·¥Ä·¥Ñ·¥ãs.
/seek : s·¥á·¥á·¥ã ·¥õ ú·¥á s·¥õ Ä·¥á·¥Ä·¥ç ·¥õ·¥è ·¥õ ú·¥á …¢…™·¥†·¥á…¥ D·¥ú Ä·¥Ä·¥õ…™·¥è…¥.
"""


PLAY_COMMAND = ["play", "vplay", "playforce", "vplayforce"]


@app.on_message(filters.command(PLAY_COMMAND) & filters.group & ~BANNED_USERS)
@PlayWrapper
async def play_commnd(_, message: Message, chat_id, video, playmode, url, fplay):
    mystic = await message.reply_text("üîÑ ·¥ò Ä·¥è·¥Ñ·¥áss…™…¥…¢ «´·¥ú·¥á Ä è ...")
    plist_id = None
    slider = None
    plist_type = None
    spotify = None
    user_id = message.from_user.id
    user_name = message.from_user.first_name
    audio_telegram = (
        (
            message.reply_to_message.audio
            or message.reply_to_message.voice
        )
        if message.reply_to_message
        else None
    )
    video_telegram = (
        (
            message.reply_to_message.video
            or message.reply_to_message.document
        )
        if message.reply_to_message
        else None
    )
    if audio_telegram:
        if audio_telegram.file_size > config.TG_AUDIO_FILESIZE_LIMIT:
            return await mystic.edit_text("“ì·¥Ä…™ ü·¥á·¥Ö ·¥õ·¥è ·¥ò Ä·¥è·¥Ñ·¥áss ·¥Ä·¥ú·¥Ö…™·¥è “ì…™ ü·¥á ...")
        duration_min = seconds_to_min(audio_telegram.duration)
        if (audio_telegram.duration) > config.DURATION_LIMIT:
            return await mystic.edit_text(
                "**·¥Ö·¥ú Ä·¥Ä·¥õ…™·¥è…¥  ü…™·¥ç…™·¥õ ·¥áx·¥Ñ·¥á·¥á·¥Ö·¥á·¥Ö**\n\n**·¥Ä ü ü·¥è·¥°·¥á·¥Ö ·¥Ö·¥ú Ä·¥Ä·¥õ…™·¥è…¥ : **{0} ·¥ç…™…¥·¥ú·¥õ·¥á(s)\n** Ä·¥á·¥Ñ·¥á…™·¥†·¥á·¥Ö ·¥Ö·¥ú Ä·¥Ä·¥õ…™·¥è…¥ :** {1}  ú·¥è·¥ú Ä(s)".format(
                    config.DURATION_LIMIT_MIN, duration_min
                )
            )
        file_path = await Telegram.get_filepath(audio=audio_telegram)
        if await Telegram.download(message, mystic, file_path):
            message_link = await Telegram.get_link(message)
            file_name = await Telegram.get_filename(audio_telegram, audio=True)
            dur = await Telegram.get_duration(audio_telegram)
            details = {
                "title": file_name,
                "link": message_link,
                "path": file_path,
                "dur": dur,
            }

            try:
                await streams(
                    mystic,
                    user_id,
                    details,
                    chat_id,
                    user_name,
                    message.chat.id,
                    streamtype="telegram",
                    forceplay=fplay,
                )
            except Exception as e:
                print(f"[ERROR] : {e}")
                ex_type = type(e).__name__
                err = (
                    e
                    if ex_type == "AssistantErr"
                    else "s·¥è·¥ç·¥á **·¥áx·¥Ñ·¥á·¥ò·¥õ…™·¥è…¥ ·¥è·¥Ñ·¥Ñ·¥ú Ä·¥á·¥Ö** ·¥° ú…™ ü·¥á ·¥ò Ä·¥è·¥Ñ·¥áss…™…¥…¢  è·¥è·¥ú Ä «´·¥ú·¥á Ä è ...\n\n·¥áx·¥Ñ·¥á·¥ò·¥õ…™·¥è…¥ ·¥õ è·¥ò·¥á :- {0}".format(ex_type)
                )
                return await mystic.edit_text(err)
            return await mystic.delete()
        return
    elif video_telegram:
        if not await is_video_allowed(message.chat.id):
            return await mystic.edit_text("“ì·¥Ä…™ ü·¥á·¥Ö ·¥õ·¥è ·¥ò Ä·¥è·¥Ñ·¥áss «´·¥ú·¥á Ä è !")
        if message.reply_to_message.document:
            try:
                ext = video_telegram.file_name.split(".")[-1]
                if ext.lower() not in formats:
                    return await mystic.edit_text(
                         "…¥·¥è·¥õ ·¥Ä ·¥†·¥Ä ü…™·¥Ö ·¥†…™·¥Ö·¥á·¥è “ì…™ ü·¥á ·¥áx·¥õ·¥á…¥s…™·¥è…¥ !\n\n**s·¥ú·¥ò·¥ò·¥è Ä·¥õ·¥á·¥Ö “ì·¥è Ä·¥ç·¥Ä·¥õs :** {0}".format(f"{' | '.join(formats)}")
                    )
            except:
                return await mystic.edit_text(
                     "…¥·¥è·¥õ ·¥Ä ·¥†·¥Ä ü…™·¥Ö ·¥†…™·¥Ö·¥á·¥è “ì…™ ü·¥á ·¥áx·¥õ·¥á…¥s…™·¥è…¥ !\n\n**s·¥ú·¥ò·¥ò·¥è Ä·¥õ·¥á·¥Ö “ì·¥è Ä·¥ç·¥Ä·¥õs :** {0}".format(f"{' | '.join(formats)}")
                )
        if video_telegram.file_size > config.TG_VIDEO_FILESIZE_LIMIT:
            return await mystic.edit_text("Video File Size Should Be Less Than 1 GiB")
        file_path = await Telegram.get_filepath(video=video_telegram)
        
        if await Telegram.download(message, mystic, file_path):
            message_link = await Telegram.get_link(message)
            file_name = await Telegram.get_filename(video_telegram)
            dur = await Telegram.get_duration(video_telegram)
            details = {
                "title": file_name,
                "link": message_link,
                "path": file_path,
                "dur": dur,
            }
            try:
                await streams(
                    mystic,
                    user_id,
                    details,
                    chat_id,
                    user_name,
                    message.chat.id,
                    video=True,
                    streamtype="telegram",
                    forceplay=fplay,
                )
            except Exception as e:
                print(f"[ERROR] : {e}")
                ex_type = type(e).__name__
                err = (
                    e
                    if ex_type == "AssistantErr"
                    else "s·¥è·¥ç·¥á **·¥áx·¥Ñ·¥á·¥ò·¥õ…™·¥è…¥ ·¥è·¥Ñ·¥Ñ·¥ú Ä·¥á·¥Ö** ·¥° ú…™ ü·¥á ·¥ò Ä·¥è·¥Ñ·¥áss…™…¥…¢  è·¥è·¥ú Ä «´·¥ú·¥á Ä è ...\n\n·¥áx·¥Ñ·¥á·¥ò·¥õ…™·¥è…¥ ·¥õ è·¥ò·¥á:- {0}".format(ex_type)
                )
                return await mystic.edit_text(err)
            return await mystic.delete()
        return
    elif url:
        if await YouTube.exists(url):
            if "playlist" in url:
                try:
                    details = await YouTube.playlist(
                        url,
                        config.PLAYLIST_FETCH_LIMIT,
                        message.from_user.id,
                    )
                except Exception as e:
                    print(f"[ERROR] : {e}")
                    return await mystic.edit_text("“ì·¥Ä…™ ü·¥á·¥Ö ·¥õ·¥è ·¥ò Ä·¥è·¥Ñ·¥áss «´·¥ú·¥á Ä è !")
                streamtype = "playlist"
                plist_type = "yt"
                if "&" in url:
                    plist_id = (url.split("=")[1]).split("&")[0]
                else:
                    plist_id = url.split("=")[1]
                img = config.STREAM_IMG
                cap = "** è·¥è·¥ú·¥õ·¥ú ô·¥á ·¥ò ü·¥Ä è ü…™s·¥õ “ì·¥á·¥Ä·¥õ·¥ú Ä·¥á**\n\ns·¥á ü·¥á·¥Ñ·¥õ ·¥õ ú·¥á ·¥ç·¥è·¥Ö·¥á …™…¥ ·¥° ú…™·¥Ñ ú  è·¥è·¥ú ·¥°·¥Ä…¥·¥õ ·¥õ·¥è ·¥ò ü·¥Ä è ·¥° ú·¥è ü·¥á  è·¥è·¥ú·¥õ·¥ú ô·¥á ·¥ò ü·¥Ä è ü…™s·¥õ"
            else:
                try:
                    details, track_id = await YouTube.track(url)
                except Exception as e:
                    print(f"[ERROR] : {e}")
                    return await mystic.edit_text("“ì·¥Ä…™ ü·¥á·¥Ö ·¥õ·¥è ·¥ò Ä·¥è·¥Ñ·¥áss «´·¥ú·¥á Ä è !")
                streamtype = "youtube"
                img = details["thumb"]
                cap = "üìéTitle: **{0}\n\n‚è≥Duration:** {1} Mins".format(
                    details["title"],
                    details["duration_min"],
                )
        elif await Spotify.valid(url):
            spotify = True
            if (
                not config.SPOTIFY_CLIENT_ID
                and not config.SPOTIFY_CLIENT_SECRET
            ):
                return await mystic.edit_text(
                    "This bot isn't able to play spotify queries. Please ask my owner to enable spotify."
                )
            if "track" in url:
                try:
                    details, track_id = await Spotify.track(url)
                except Exception:
                    return await mystic.edit_text("Failed to Process Query !")
                streamtype = "youtube"
                img = details["thumb"]
                cap = "üìéTitle: **{0}\n\n‚è≥Duration:** {1} Mins".format(
                    details["title"], details["duration_min"]
                )
            elif "playlist" in url:
                try:
                    details, plist_id = await Spotify.playlist(url)
                except Exception:
                    return await mystic.edit_text("Failed to Process Query !")
                streamtype = "playlist"
                plist_type = "spplay"
                img = config.SPOTIFY_PLAYLIST_IMG_URL
                cap = "**Spotify Play Mode**\n\nRequested By:- {0}".format(
                    message.from_user.first_name
                )
            elif "album" in url:
                try:
                    details, plist_id = await Spotify.album(url)
                except Exception:
                    return await mystic.edit_text("Failed to Process Query !")
                streamtype = "playlist"
                plist_type = "spalbum"
                img = config.SPOTIFY_ALBUM_IMG_URL
                cap = "**Spotify Play Mode**\n\nRequested By:- {0}".format(
                    message.from_user.first_name
                )
            elif "artist" in url:
                try:
                    details, plist_id = await Spotify.artist(url)
                except Exception:
                    return await mystic.edit_text("Failed to Process Query !")
                streamtype = "playlist"
                plist_type = "spartist"
                img = config.SPOTIFY_ARTIST_IMG_URL
                cap = "**Spotify Play Mode**\n\nRequested By:- {0}".format(
                    message.from_user.first_name
                )
            else:
                return await mystic.edit_text("Unable to play this type of spotify query !")
      
        else:
            try:
                await CallMusic.stream_call(url)
            except NoActiveGroupCall:
                await mystic.edit_text("There's an issue with the bot ...")
                return
            except Exception as e:
                print(f"[ERROR] : {e}")
                await mystic.delete()
                return 
            await mystic.edit_text("‚úÖ ·¥†·¥Ä ü…™·¥Ö s·¥õ Ä·¥á·¥Ä·¥ç ·¥†·¥á Ä…™“ì…™·¥á·¥Ö ...")
            try:
                await streams(
                    mystic,
                    message.from_user.id,
                    url,
                    chat_id,
                    message.from_user.first_name,
                    message.chat.id,
                    video=video,
                    streamtype="index",
                    forceplay=fplay,
                )
            except Exception as e:
                print(f"[ERROR] : {e}")
                return await mystic.delete()
            return await play_logs(message, streamtype="M3u8 or Index Link")
    else:
        if len(message.command) < 2:
            buttons = botplaylist_markup()
            return await mystic.edit_text(
                "**·¥ús·¥Ä…¢·¥á:** /play [·¥ç·¥ús…™·¥Ñ …¥·¥Ä·¥ç·¥á ·¥è Ä  è·¥è·¥ú·¥õ·¥ú ô·¥á  ü…™…¥·¥ã ·¥è Ä  Ä·¥á·¥ò ü è ·¥õ·¥è ·¥Ä·¥ú·¥Ö…™·¥è]",
                reply_markup=InlineKeyboardMarkup(buttons),
            )
        slider = True
        query = message.text.split(None, 1)[1]
        if "-v" in query:
            query = query.replace("-v", "")
        try:
            details, track_id = await YouTube.track(query)
        except Exception:
            return await mystic.edit_text("“ì·¥Ä…™ ü·¥á·¥Ö ·¥õ·¥è ·¥ò Ä·¥è·¥Ñ·¥áss «´·¥ú·¥á Ä è !")
        streamtype = "youtube"
    if str(playmode) == "Direct":
        if not plist_type:
            if details["duration_min"]:
                duration_sec = time_to_seconds(
                    details["duration_min"]
                )
                if duration_sec > config.DURATION_LIMIT:
                    return await mystic.edit_text(
                        "**·¥Ö·¥ú Ä·¥Ä·¥õ…™·¥è…¥  ü…™·¥ç…™·¥õ ·¥áx·¥Ñ·¥á·¥á·¥Ö·¥á·¥Ö**\n\n**·¥Ä ü ü·¥è·¥°·¥á·¥Ö ·¥Ö·¥ú Ä·¥Ä·¥õ…™·¥è…¥ **{0} ·¥ç…™…¥·¥ú·¥õ·¥á(s)\n** Ä·¥á·¥Ñ·¥á…™·¥†·¥á·¥Ö ·¥Ö·¥ú Ä·¥Ä·¥õ…™·¥è…¥ :** {1}  ú·¥è·¥ú Ä(s)".format(
                            config.DURATION_LIMIT_MIN,
                            details["duration_min"],
                        )
                    )
            else:
                buttons = livestream_markup(
                    track_id,
                    user_id,
                    "v" if video else "a",
                    "f" if fplay else "d",
                )
                return await mystic.edit_text(
                    "** ü…™·¥†·¥á s·¥õ Ä·¥á·¥Ä·¥ç ·¥Ö·¥á·¥õ·¥á·¥Ñ·¥õ·¥á·¥Ö ...**",
                    reply_markup=InlineKeyboardMarkup(buttons),
                )
        try:
           await streams(
                mystic,
                user_id,
                details,
                chat_id,
                user_name,
                message.chat.id,
                video=video,
                streamtype=streamtype,
                spotify=spotify,
                forceplay=fplay,
            )
        except Exception as e:
            print(f"[ERROR] : {e}")
            return await mystic.delete()
        await mystic.delete()
        return await play_logs(message, streamtype=streamtype)
    else:
        if slider:
            buttons = slider_markup(
                track_id,
                message.from_user.id,
                query,
                0,
                "f" if fplay else "d",
            )
            await mystic.delete()
            await message.reply_photo(
                photo=details["thumb"],
                caption="üìéTitle: **{0}\n\n‚è≥Duration:** {1} Mins".format(
                    details["title"].title(),
                    details["duration_min"],
                ),
                reply_markup=InlineKeyboardMarkup(buttons),
            )
            return await play_logs(message, streamtype=f"Searched on Youtube")
        else:
            buttons = track_markup(
                track_id,
                message.from_user.id,
                "f" if fplay else "d",
            )
            await mystic.delete()
            await message.reply_photo(
                photo=img,
                caption=cap,
                reply_markup=InlineKeyboardMarkup(buttons),
            )
            return await play_logs(message, streamtype=f"URL Searched Inline")
